#!/bin/bash
#
# redeploy script
# puppet sets a cronjob to run each night in qa
# can also be run at any time to redeploy
#

PATH=/usr/local/<%= @nodejs_version %>/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

function usage {
  echo "$0 [ --debug ] [ --force ]"
  echo "Redeploys environment for qa and reinserts fake data."
  echo " --debug      prints bunch more puppet and npm output."
  echo " --force      overrides lock file '$lockFile'"
  exit 1
}

# default reduced verboseness of puppet and npm...
MYPUPPETOPTIONS='--onetime --no-daemonize --verbose'
MYNPMOPTIONS='--loglevel warn'
lockFile=/var/lock/redeploy
# poor mans option processing, as I like --long-options
for arg in "$@"
do
  shift
  case "$arg" in
    "--debug") echo "Debug on."
               MYPUPPETOPTIONS=-t
               MYNPMOPTIONS=
               ;;
    "--force") echo "Overriding lock file."
               lockFile=/NoChanceOfThisExisting
               ;;
    *) usage ;;
  esac
done

# quit if lockFile exists
if [ -e "$lockFile" ]
then
  echo "Lockfile $lockFile exists!"
  exit 2
fi

# ensure we're initially not somewhere that's going to be removed
mycwd=$(pwd)
cd /

echo
echo "Re-deploying $HOSTNAME: $(date)"
echo "========================================================="
echo


# Simple requirement check
if [ ! -d "<%= model_loader_dir %>" ] ; then
    echo "The model loader was not found. Exitting"
    exit 1
elif [ ! -f "<%= model_loader_dir %>/scripts/users/0.txt" ] ; then
    echo "There was no batch found in the model loader."
    echo "You can generate a batch with:"
    echo "cd <%= model_loader_dir %> && node generate.js -b 1 -t oae -u 200 -g 400 -c 1000 -d 200 -f 200"
    exit 1
fi


echo "Shutting down services..."
<%= scripts_dir %>/shutdown.sh

echo
echo "Deleting data..."
<%= scripts_dir %>/deletedata.sh

echo
echo "Restoring services with puppet"
puppet agent --onetime --no-daemonize --verbose

echo
echo "Performing production build (this will take a little while)"

service hilary stop

cd <%= ux_root_dir %>
/usr/local/<%= @nodejs_version %>/bin/npm install -g grunt-cli --loglevel warn

# so...in theory a tarball release can be handled by the puppet run earlier
if [ -e /opt/oae/build-info.json ]
then
    echo "Detected tarball install"
    # no longer required to reset config.ui path
else
# but a git master release needs some processing
    echo "Detected git master install"

    /usr/local/<%= @nodejs_version %>/bin/npm install -d --loglevel warn

    # Only cdnify if ui_cdn_url is set in hiera
    ui_cdn_url="<%= ui_cdn_url %>"
    if [ ! -z "$ui_cdn_url" ]; then
        CDN_URL="$ui_cdn_url" grunt
    else
        /usr/local/<%= @nodejs_version %>/bin/grunt
    fi

    # jiggle arround the ux files until they're all in the right place
    rm -rf /tmp/target
    mv target /tmp
    cd /
    rm -rf <%= ux_root_dir %>
    mv /tmp/target/optimized <%= ux_root_dir %>
    rm -rf <%= ux_root_dir %>/../original
    mv /tmp/target/original <%= ux_root_dir %>/../original
    cd <%= ux_root_dir %>
fi

service hilary start

DELAY=60
echo
echo "Sleeping ${DELAY}s to let the app server start up"
sleep $DELAY

# Restarting nginx so it finds the app server up quicker
service nginx restart

cd <%= scripts_dir %>

echo
echo "Updating oaesh"
/usr/local/<%= @nodejs_version %>/bin/npm install -g oaesh --loglevel warn

# Create an 'oae' tenant.
echo
echo "Creating an 'oae' tenant and disabling reCaptcha"
oaesh -i -U https://<%= admin_host %> -u administrator -p administrator -- \
    exec /api/tenant/create -d "alias=oae" -d "displayName=Open Academic Environment" -d "host=oae.<%= web_domain %>"

# Disable reCaptcha
oaesh -i -U https://<%= admin_host %> -u administrator -p administrator -- \
    config-set -k "oae-principals/recaptcha/enabled=false"

# Configuring the Flickr Preview Processor
if [[ "<%= flickr_api_key %>" != "unset" ]] && [[ "<%=flickr_api_secret %>" != "unset"  ]] ; then
    oaesh -i -U https://<%= admin_host %> -u administrator -p administrator -- \
        config-set \
            -k "oae-preview-processor/flickr/apikey=<%=flickr_api_key %>" \
            -k "oae-preview-processor/flickr/apisecret=<%=flickr_api_secret %>"
fi


# Configuring the SlideShare Preview Processor
if [[ "<%= slideshare_api_key %>" != "unset" ]] && [[ "<%= slideshare_shared_secret %>" != "unset" ]] ; then
    oaesh -i -U https://<%= admin_host %> -u administrator -p administrator -- \
        config-set \
            -k "oae-preview-processor/slideshare/sharedsecret=<%=slideshare_shared_secret %>" \
            -k "oae-preview-processor/slideshare/apikey=<%= slideshare_api_key %>"
fi


# Configuring the Youtube Preview Processor
if [[ "<%= youtube_api_key %>" != "unset" ]] ; then
    oaesh -i -U https://<%= admin_host %> -u administrator -p administrator -- \
        config-set \
            -k "oae-preview-processor/youtube/key=<%=youtube_api_key %>"
fi

# Performing a data load. An initial set of scripts should already be present on the server (requires
# manual intervention)
echo
echo "Loading data via the model loader"
cd <%= model_loader_dir %>
node loaddata.js -b 1 -s 0 -h https://oae.<%= web_domain %>

# go back to where the script was run from
cd $mycwd

